import{_ as e,o as t,c as a,e as s}from"./app-959786d2.js";const r="/assets/1725520494032-ce65efb9.png",n="/assets/1725520185591-c7ffcda7.png",i="/assets/1725520199320-17296742.png",m="/assets/1725520211957-a721c5a2.png",o="/assets/1725520222142-569a7c71.png",p="/assets/1725520292792-e0ebbf52.png",c="/assets/1725520301875-c62cdf18.png",l="/assets/1725520313534-cadc5e66.png",d="/assets/1725520323456-fcba9dcd.png",_="/assets/1725520350716-320de541.png",h="/assets/1725520362924-3001bf1d.png",u="/assets/1725520383786-ef2ef93c.png",f={},g=s('<h4 id="一、表格数据自动滚动的实现方式分析" tabindex="-1"><a class="header-anchor" href="#一、表格数据自动滚动的实现方式分析" aria-hidden="true">#</a> 一、表格数据自动滚动的实现方式分析</h4><p>在el-table元素中定义height属性，即可实现固定表头的表格，当数据较多超出表格的高度时，则会出现一个滚动条，改变滚动条的位置即可让超出表格高度的数据出现在表格中，因此我们可以设置一个定时器定时去更改滚动条位置，就能让表格自动滚动展示所有数据。本案列中分别使用setInterval函数和浏览器的window.requestAnimationFrame函数来实现定时器功能，个人推荐使用window.requestAnimationFrame来实现，两种实现方式的区别将在后文进行介绍。</p><h4 id="二、使用setinterval函数实现自动滚动" tabindex="-1"><a class="header-anchor" href="#二、使用setinterval函数实现自动滚动" aria-hidden="true">#</a> 二、使用setInterval函数实现自动滚动</h4><p>1、setInterval的作用：以指定的时间间隔（以毫秒为单位）重复执行传入的函数，语法：setInterval(function, delay)。 2、代码实现</p><p>（1）、元素模板结构</p><p><img src="'+r+'" alt="1725520494032"></p><p>（2）、请求接口获取据</p><p><img src="'+n+'" alt="1725520185591"></p><p>（3）、定时更改滚动条位置</p><p><img src="'+i+'" alt="1725520199320"></p><p><img src="'+m+'" alt="1725520211957"></p><p>（4）、页面效果：表格数据滚动时会出现卡顿、抖动的现象</p><p><img src="'+o+'" alt="1725520222142"></p><h4 id="三、使用requestanimationframe函数实现自动滚动-推荐" tabindex="-1"><a class="header-anchor" href="#三、使用requestanimationframe函数实现自动滚动-推荐" aria-hidden="true">#</a> 三、使用requestAnimationFrame函数实现自动滚动（推荐）</h4><p>1、window.requestAnimationFrame()的作用：告诉浏览器希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。 注意：若想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame() 语法：requestAnimationFrame (function) 2、代码实现 元素模板结构和请求接口获取数据的代码和setInterval的实现方式相同，主要区别在定时更改滚动条位置的实现上，代码如下：</p><p><img src="'+p+'" alt="1725520292792"></p><p><img src="'+c+'" alt="1725520301875"></p><p><img src="'+l+'" alt="1725520313534"></p><p>3、页面效果：表格数据滚动流畅，未出现卡顿、抖动的现象</p><p><img src="'+d+'" alt="1725520323456"></p><h4 id="四、为什么推荐使用requestanimationframe实现自动滚动" tabindex="-1"><a class="header-anchor" href="#四、为什么推荐使用requestanimationframe实现自动滚动" aria-hidden="true">#</a> 四、为什么推荐使用requestAnimationFrame实现自动滚动</h4><p>1、setInterval实现的滚动会出现卡顿、抖动的现象。这主要是因为：setInterval的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象, setInterval的执行只是在内存中对图像属性进行改变，这个变化必须要等到屏幕下次刷新时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的图像，产生这种现象的原因主要有两个： （1）、setInterval的执行时间并不是确定的。在 Javascript 中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 setInterval的实际执行时间一般要比其设定的时间晚一些。 （2）、刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setInterval只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。 requestAnimationFrame实现的滚动更加流畅，未出现卡顿、抖动的现象。这是因为requestAnimationFrame能够做到精准严格的卡住显示器刷新的时间执行回调函数，该函数能以浏览器的显示频率来作为其动画动作的频率，比如浏览器每16.7ms刷新一次，动画回调也每16.7ms调用一次，这样就不会存在过度绘制的问题，动画不会掉帧，自然流畅。</p><p><img src="'+_+'" alt="1725520350716"></p><p>上图是setInterval执行时的帧率截图，可以看到帧率有16.7ms的，也有被拉长到33.3ms和50.0ms的。</p><p><img src="'+h+'" alt="1725520362924"></p><p>上图是requestAnimationFrame执行时的帧率截图，可以看到页面能够保持在16.7ms一帧。 2、setInterval实现的滚动动画，当页面被隐藏或最小化时，setInterval仍然在后台执行滚动动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费 CPU 资源。而requestAnimationFrame 则完全不同，当页面处理未激活的状态下，比如隐藏、切换页面等，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统步伐走的 requestAnimationFrame 也会停止渲染，当页面被重新激活时，滚动动画才会从上次停留的地方继续执行，这种做法有效节省了 CPU 开销。 3、有一个无缝滚动的插件库，叫做seamless-scroll，其内部滚动动画的实现原理也是基于requestAnimationFrame实现的，以下是该插件实现滚动动画的部分代码</p><p><img src="'+u+'" alt="1725520383786"></p><h4 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h4><p>本案例主要介绍了分别使用setInterval函数和window.requestAnimationFrame函数来实现Table表格数据自动滚动的动画以及为什么推荐使用requestAnimationFrame函数来实现滚动的原因。除了用来制作动画，requestAnimationFrame还可以用来优化大数据列表渲染，虽然在极少数浏览器上会存在兼容性问题，但在主流浏览器上都是能正常使用的。如有不足，请提出宝贵建议，欢迎大家一起学习交流！</p>',29),q=[g];function v(A,F){return t(),a("div",null,q)}const b=e(f,[["render",v],["__file","tableAutoScroll.html.vue"]]);export{b as default};
