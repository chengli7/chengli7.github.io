import{_ as n,r,o as i,c as o,a as e,b as a,e as s,d}from"./app-572c54b3.js";const p="/assets/1725518654303-a21eaaad.png",c="/assets/1725518680846-831f0562.png",l="/assets/1725519340534-2bff2967.png",g={},h=e("h2",{id:"一、为什么选择gsap",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、为什么选择gsap","aria-hidden":"true"},"#"),a(" 一、为什么选择gsap")],-1),u={href:"https://v2.cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},v=e("a",{href:"#animating-with-watchers"},"vue3官网的动画技巧章节",-1),_={href:"https://v2.cn.vuejs.org/v2/guide/transitioning-state.html",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[e("img",{src:p,alt:"1725518654303"})],-1),x=e("p",null,[e("img",{src:c,alt:"1725518680846"})],-1),b=e("h2",{id:"二、什么是gsap",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二、什么是gsap","aria-hidden":"true"},"#"),a(" 二、什么是gsap")],-1),f={href:"https://github.com/greensock/GSAP",target:"_blank",rel:"noopener noreferrer"},k=e("strong",null,"GreenSock Animation Platform",-1),S=d(`<h2 id="三、gsap的使用" tabindex="-1"><a class="header-anchor" href="#三、gsap的使用" aria-hidden="true">#</a> 三、gsap的使用</h2><p>1、安装gsap</p><p>(1)、CDN方式安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2)、NPM方式安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install gsap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、项目中使用gsap</p><p>（1）、需要在文件中先引入gsap</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import gsap from gsap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）、在watch监听器中监听想要应用动画的变量，当变量的值发生变化时调用下图中gsap的to方法。除了watch监听，也可以在其他地方调用gsap的to方法，只要传入对应的参数就行。本案例中使用watch监听实现。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.to(target,{duration:1, vars: value});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>target: 应用动画的目标，可以是dom元素，也可以是变量</p><p>duration: 动画的持续时间，除了duration, 也可以添加delay（设置动画延迟）、ease（设置动画过渡方式）等属性实现更复杂的效果</p><p><strong>vars</strong>：target中的属性名(target..vars)</p><p><strong>value</strong>：监听的变量变化时的值，也是动画结束时的值</p><p>以下是项目中使用到的gsap方法。</p><p><img src="`+l+'" alt="1725519340534"></p><p>需要特别注意的是：watch监听的变量名不能和应用动画的变量名是同一个，否则会导致数字滚动后的值不是正确的值，为了滚动时不出现小数，还需要调用toFixed()去掉小数。</p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h2><p>本案例主要介绍了如何使用一个专业的动画库gsap实现数字滚动的效果，除数字滚动外，gsap还有很多其他复杂、炫酷的动画效果，欢迎大家一起学习交流！</p>',20);function w(G,N){const t=r("ExternalLinkIcon");return i(),o("div",null,[h,e("p",null,[a("在"),e("a",u,[a("vue2官网"),s(t)]),a("的过渡 & 动画章节中介绍状态过渡时就使用到了gsap插件来讲解状态动画与侦听器的实现，在输入框中输入数字， 输入框下方展示数字滚动效果，该例子刚好可以满足项目中想达到的效果。"),v,a("也使用到了gsap插件来实现 基于侦听器的动画。下图是"),e("a",_,[a("vue2官网使用的例子"),s(t)]),a("。")]),m,x,b,e("p",null,[a("以下是官网的部分介绍，"),e("a",f,[a("gsap（"),k,a("）"),s(t)]),a("是一个健壮的JavaScript工具集，可以将开发人员变成动画超级英雄。构建可在所有主流浏览器中运行的高性能动画。GSAP可以轻松实现高级效果，如滚动，变形，沿着运动路径动画或FLIP动画。甚至还有一个方便的Observer来规范跨浏览器/设备的事件检测。GSAP的ScrollTrigger插件可以让你用最少的代码创建令人瞠目结舌的滚动动画。")]),S])}const j=n(g,[["render",w],["__file","useGsap.html.vue"]]);export{j as default};
